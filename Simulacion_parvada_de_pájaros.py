# -*- coding: utf-8 -*-
"""Trabajo 1 Parvada de pÃ¡jaros.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4BeL1j03KN-vR-OMKHbzhkayeOIBS9x
"""

import numpy as np #funciones matematicas
import matplotlib.pyplot as plt #Graficas
#Parametros
dr = 0.8 #Distancia de repulsion
da = 6 #Distancia de atraccion
ca = 10 #Constante de atraccion
cr = 4 #Constante de repulsion
cv = 10 #Constante de velocidad
t = 0
N = 5 #Numero de aves
dt = 0.1
M = 20 #Masa
x=np.random.randn(N)*10
y=np.random.randn(N)*10
vx=np.random.randn(N)
vy=np.random.randn(N)
Tx = []
Ty = []
plt.axis('off')
plt.plot(x,y,">", color = "black")
while( t <= 100):
  CM = [np.mean(x),np.mean(y)] #Centro de masa
  Vprom = [np.mean(vx),np.mean(vy)] #Velocidad promedio
  vprom = np.linalg.norm(Vprom)
  FV = [Vprom[0]*(cv/(vprom*vprom)),Vprom[1]*(cv/(vprom*vprom))] #Fuerza velocidad
  aux = x #Guardar en auxiliares para calcular las fuerzas con la actual
  auy = y
  for i in range(0,N): #Fuerza de atraccion de cada pajaro al centro
    d = np.linalg.norm([CM[0] - aux[i], CM[1] - auy[i]])
    FA = [(CM[0] - aux[i]) * (ca / d), (CM[1] - auy[i]) * (ca / d)]
    FR = [0,0]
    for j in range(0,N): #Fuerza de repulsion de cada pajaro con todos los pajaros
      if(i != j):#No se calcula con si mismo
        d = np.linalg.norm([aux[i] - aux[j], auy[i] - auy[j]])
        if(d < dr):
            FR[0] += -(aux[i] - aux[j]) * (cr / (d*d))
            FR[1] += -(auy[i] - auy[j]) * (cr / (d*d))
    x[i] = aux[i] + dt*vx[i]
    vx[i] = vx[i] + dt*(FA[0] + FR[0] + FV[0])/M
    y[i] = auy[i] + dt*vy[i]
    vy[i] = vy[i] + dt*(FA[1] + FR[1] + FV[1])/M
    Tx.append(x[i])
    Ty.append(y[i])
  plt.cla()
  plt.axis('off')
  plt.plot(x,y,">", color = "black")
  plt.pause(0.0001)
  t = t + dt
plt.plot(Tx,Ty, ".r")
plt.pause(0.0001)